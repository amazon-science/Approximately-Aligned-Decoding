import abc
from typing import Optional, List, Tuple

import torch

from approx_aligned_decoding.decoded_token_stream import DecodedTokenStream
from approx_aligned_decoding.probability_modifier_trie import ProbabilityModifierTrieNode


class BacktrackingStrategy(abc.ABC):
    """
    Abstracts several generation strategies (naive constrained generation, grammar aligned decoding, and our method)
    into a common interface
    """
    def reset_state(self):
        pass

    def pre_speculative_detector(self, probability_trie_node: ProbabilityModifierTrieNode,
                                 sampled_toks: torch.Tensor,
                                 speculative_probs: torch.Tensor,
                                 main_probs: torch.Tensor,
                                 gen_tokens: DecodedTokenStream):
        """
        Called prior to invoking the hallucination detector on the speculative outputs
        :param probability_trie_node: Current generation head
        :param sampled_toks: Input IDs generated by the speculative model, shape (num_generations, generation_length).
                             Children of the current probability_trie_node
        :param speculative_probs: Probabilities from the speculative model (num_generations, generation_length, vocab_size)
        :param main_probs: Probabilities from the main model (num_generations, generation_length+1, vocab_size)
        :return: Nothing
        """
        pass

    def post_speculative_detector(self,
                                  probability_trie_node: ProbabilityModifierTrieNode,
                                  sampled_toks: torch.Tensor,
                                  speculative_probs: torch.Tensor,
                                  main_probs: torch.Tensor,
                                  hallu_indices: List[Optional[int]],
                                  gen_tokens: DecodedTokenStream) -> Optional[Tuple[int, int]]:
        """
        Called after invoking the detector for speculative threads, and updating the probability trie
        Mostly same parameters
        :param hallu_indices: Hallucination indices within sampled_toks
        :return: (Token Index, Replacement Token) if we must backtrack to a specific point, or None if no backtrack
        Note that token index is relative to the root of probability_trie_node
        """
        return None

    def pre_sample_whole_generation_check(self,
                                          probability_trie_node: ProbabilityModifierTrieNode,
                                          gen_tokens: DecodedTokenStream):
        """
        Called after specific tokens are chosen from speculative threads
        :param probability_trie_node:
        :return: (Token Index, Replacement Token) if we must backtrack to a specific point, or None if no backtrack
        """
        return None

    def post_sample_whole_generation_check(self,
                                           probability_trie_node: ProbabilityModifierTrieNode,
                                           hallu_index: Optional[int],
                                           gen_tokens: DecodedTokenStream) -> Optional[Tuple[int, int]]:
        """
        Called after specific tokens are chosen from speculative threads, and the detector is run/probabilities are updated
        :param probability_trie_node:
        :param hallu_index: Hallucination index within entirety of probability_trie_node's parent path
        :return: (Token Index, Replacement Token) if we must backtrack to a specific point, or None if no backtrack
        """
        return None

    @abc.abstractmethod
    def do_whole_sample_hallu_check(self) -> bool:
        raise NotImplemented
